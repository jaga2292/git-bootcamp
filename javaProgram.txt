JAva PROGRAMS -----------------------

 

-----PRIME NUMBER PROGRAM---

 

public class HelloWorld{

 

     public static void main(String []args){

     

      int i =0;

      int num =0;

      //Empty String

      String  primeNumbers = "";

     

      int n = 10;

    

      for (i = 1; i <= n; i++)                    

      {                                                          

         int counter=0;                            

         for(num =i; num>=1; num--)

         {

             System.out.println(i+"--"+i%num);

                    if(i%num==0)

                    {

                        

                                counter = counter + 1;

                    }

                }

                if (counter ==2)

                {

                    //Appended the Prime number to the String

                    primeNumbers = primeNumbers + i + " ";

                }            

      }       

      System.out.println("Prime numbers from 1 to n are :");

      System.out.println(primeNumbers);

     }

}

 

 

 

 

----------------PRINT PATTEREN --------------------

 

 

import java.util.Arrays;

 

public class Sample {

 

       public static void main(String[] args) {

              // TODO Auto-generated method stub

 

              String str = "edfcjghaib";

              char[] ch = str.toCharArray();

              int[] ch1=new int[]{3,7,1,15,33,78,22,10,66,58};

              Arrays.sort(ch);

              Arrays.sort(ch1);

              int k=0;

              System.out.println(ch1);

              System.out.println(ch1.length);

              for(int i=0;i<ch1.length;i++){

                    

                     for(int j=0 ;j<=i;j++){

                           if(k<=ch1.length-1){

                                  System.out.print(" "+ch1[k]);

                                  k++;

                           }

                           else

                                  break;

                     }

             

                     System.out.println("\n");

              }

       }

 

}

 

 

--------------------Sort Array of Strings-------------

 

public class SortString {

static String arr[] = {

"Now", "is", "the", "time", "for", "all", "good", "men",

"to", "come", "to", "the", "aid", "of", "their", "country"

};

 

public static void main(String args[]) {

for(int j = 0; j < arr.length; j++) {

for(int i = j + 1; i < arr.length; i++) {

if(arr[i].compareTo(arr[j]) < 0) {

String t = arr[j];

arr[j] = arr[i];

arr[i] = t;

}

}

System.out.println(arr[j]);

}

}

}

 

----------count duplicates --------

 

 

package com.mkyong;

 

import java.util.ArrayList;

import java.util.Collections;

import java.util.HashMap;

import java.util.HashSet;

import java.util.List;

import java.util.Map;

import java.util.Set;

import java.util.TreeMap;

 

public class CountDuplicatedList {

 

  public static void main(String[] args) {

 

                List<String> list = new ArrayList<String>();

                list.add("a");

                list.add("b");

                list.add("c");

                list.add("d");

                list.add("b");

                list.add("c");

                list.add("a");

                list.add("a");

                list.add("a");

 

                System.out.println("\nExample 1 - Count 'a' with frequency");

                System.out.println("a : " + Collections.frequency(list, "a"));

 

                System.out.println("\nExample 2 - Count all with frequency");

                Set<String> uniqueSet = new HashSet<String>(list);

                for (String temp : uniqueSet) {

                                System.out.println(temp + ": " + Collections.frequency(list, temp));

                }

 

                System.out.println("\nExample 3 - Count all with Map");

                Map<String, Integer> map = new HashMap<String, Integer>();

 

                for (String temp : list) {

                                Integer count = map.get(temp);

                                map.put(temp, (count == null) ? 1 : count + 1);

                }

                printMap(map);

                                                               

                System.out.println("\nSorted Map");

                Map<String, Integer> treeMap = new TreeMap<String, Integer>(map);

                printMap(treeMap);

                               

  }

               

  public static void printMap(Map<String, Integer> map){

 

                for (Map.Entry<String, Integer> entry : map.entrySet()) {

                                System.out.println("Key : " + entry.getKey() + " Value : "

                                                + entry.getValue());

                }

                               

  }

 

}

---------------remove duplicates------------

import java.util.ArrayList;

import java.util.Arrays;

import java.util.List;

import java.util.stream.Collectors;

 

public class ArrayListExample

{

    public static void main(String[] args)

    {

        // ArrayList with duplicate elements

        ArrayList<Integer> numbersList = new ArrayList<>(Arrays.asList(1, 1, 2, 3, 3, 3, 4, 5, 6, 6, 6, 7, 8));

       

        System.out.println(numbersList);

 

        List<Integer> listWithoutDuplicates = numbersList.stream().distinct().collect(Collectors.toList());

       

        System.out.println(listWithoutDuplicates);

    }

}

 

 

----------circular matrix----------------

 

// Java program to fill a matrix with values from

// 1 to n*n in spiral fashion.

public class GFG {

 

                static int MAX = 100;

 

// Fills a[m][n] with values from 1 to m*n in

// spiral fashion.

                static void spiralFill(int m, int n, int a[][]) {

                                // Initialize value to be filled in matrix

                                int val = 1;

 

                                /* k - starting row index

                                m - ending row index

                                l - starting column index

                                n - ending column index */

                                int k = 0, l = 0;

                                while (k < m && l < n) {

                                                /* Print the first row from the remaining

                                rows */

                                                for (int i = l; i < n; ++i) {

                                                                a[k][i] = val++;

                                                }

 

                                                k++;

 

                                                /* Print the last column from the remaining

                                columns */

                                                for (int i = k; i < m; ++i) {

                                                                a[i][n - 1] = val++;

                                                }

                                                n--;

 

                                                /* Print the last row from the remaining

                                rows */

                                                if (k < m) {

                                                                for (int i = n - 1; i >= l; --i) {

                                                                                a[m - 1][i] = val++;

                                                                }

                                                                m--;

                                                }

 

                                                /* Print the first column from the remaining

                                columns */

                                                if (l < n) {

                                                                for (int i = m - 1; i >= k; --i) {

                                                                                a[i][l] = val++;

                                                                }

                                                                l++;

                                                }

                                }

                }

 

                /* Driver program to test above functions */

                public static void main(String[] args) {

                                int m = 4, n = 4;

                                int a[][] = new int[MAX][MAX];

                                spiralFill(m, n, a);

                                for (int i = 0; i < m; i++) {

                                                for (int j = 0; j < n; j++) {

                                                                System.out.print(a[i][j] + " ");

                                                }

                                                System.out.println("");

                                }

                }

}

 

/* This Java code is contributed by PrinciRaj1992*/

 

 

----------------

                import java.util.*;

public class Circular_Matrix

    {

        public static void main(String args[])

        {

          

            int n = 5;

            int A[][] = new int[n][n];

            int k=1, c1=0, c2=n-1, r1=0, r2=n-1;

            while(k<=n*n)

                {

                    for(int i=c1;i<=c2;i++)

                    {

                        A[r1][i]=k++;

                    }

                    for(int j=r1+1;j<=r2;j++)

                    {

                        A[j][c2]=k++;

                    }

                    for(int i=c2-1;i>=c1;i--)

                    {

                        A[r2][i]=k++;

                    }

                    for(int j=r2-1;j>=r1+1;j--)

                    {

                        A[j][c1]=k++;

                    }

                 c1++;

                 c2--;

                 r1++;

                 r2--;

                }

  

            /* Printing the Circular matrix */

            System.out.println("The Circular Matrix is:");

            for(int i=0;i<n;i++)

                {

                    for(int j=0;j<n;j++)

                        {

                            System.out.print(A[i][j]+ "\t");

                        }

                 System.out.println();

                }

        }

    }

               

                -------------- filter a list with specified prefix---------

               

 

 

import java.util.List;

import java.util.stream.Collectors;

import java.util.stream.Stream;

 

public class myclass {

 

                public static void main(String[] args) {

                                // TODO Auto-generated method stub

                                Stream<String> stream = Stream.of("Geeks", "foR",

                                                                "GeEksQuiz", "GeeksforGeeks");

 

// Using Stream filter(Predicate predicate)

// to get a stream consisting of the

// elements ending with s

List<String> arrL=stream.filter(str -> str.startsWith("g")).collect(Collectors.toList());

arrL.forEach(System.out::println);

//.forEach(System.out::println);

for(String str:arrL){

    System.out.println(str);

}

 

                }

               

               

 

}






